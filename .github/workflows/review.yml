name: "Terraform Review"

on:
  workflow_call:
    inputs:
      # working-diretory is added to specify "terraform" directory in project source code as that's where the terraform files live.
      working-directory:
        required: false
        type: string
        default: './terraform'
      # apply-brach refers to the branch where 'terraform apply' should execute. It defaults to the 'main' branch, but calling workflow has the option to change it to a deferrent branch to execute 'terraform apply'
      apply-branch:
        required: false
        type: string
        default: 'main'
      environment:
        required: false
        type: string
        default: 'dev'

defaults:
  run:
    shell: bash

jobs:
  terraform-review:
    name: Review Terraform
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    
    # important to specify the environment here so workflow knows where to deploy your artifact to.
    # default environment to "dev" if it is not passed in through workflow_dispatch manual trigger
    # environment: ${{ github.event.inputs.environment || 'dev' }}
    # environment: ${{ inputs.environment || 'dev' }}
    environment: 'dev'

    steps:
      - name: Checkout Code
        uses: actions/checkout@d0651293c4a5a52e711f25b41b05b2212f385d28
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@ef93a73b1313f148011965ef7361f667f371f58b
        with:
          #role-to-assume: ${{ secrets.DEV_DEPLOY_ROLE }}
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@7b3bcd8d76f3cbaec0a3564e53de7c9adf00f0a7
      
      - name: Terraform Init - ${{ inputs.environment }}
        id: init
        run: |
          # passes a NPM_TOKEN which has access to private repo as client app doesn't pass such credential in when calling tf reusable module.
          # credit: https://github.com/hashicorp/setup-terraform/issues/33
          # git config --global url."https://oauth2:${{ secrets.NPM_TOKEN }}@github.com".insteadOf https://github.com
          rm -rf .terraform
          terraform init -backend-config='./.env/${{ inputs.environment || 'dev' }}/backend.tfvars' -upgrade=true -no-color -input=false
      
      - name: Post Init - ${{ inputs.environment }}
        if: always() && github.ref != 'refs/heads/main' && (steps.init.outcome == 'success' || steps.init.outcome == 'failure')
        uses: robburger/terraform-pr-commenter@v1
        with:
          commenter_type: init
          commenter_input: ${{ format('{0}{1}', steps.init.outputs.stdout, steps.init.outputs.stderr) }}
          commenter_exitcode: ${{ steps.init.outputs.exitcode }}
      
      - name: Terraform Plan - ${{ inputs.environment }}
        id: plan
        run: |
          terraform plan -input=false -var-file=.env/${{ inputs.environment || 'dev' }}/terraform.tfvars -no-color
      
      - name: Post Plan - ${{ inputs.environment }}
        uses: robburger/terraform-pr-commenter@v1
        env:
          EXPAND_SUMMARY_DETAILS: true # Override global environment variable; expand details just for this step
        with:
          commenter_type: plan
          commenter_input: ${{ format('{0}{1}', steps.plan.outputs.stdout, steps.plan.outputs.stderr) }}
          commenter_exitcode: ${{ steps.plan.outputs.exitcode }}
      